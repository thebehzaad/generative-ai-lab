import logging

class LLMPlanner:
    def __init__(self, llm):
        """
        Initialize the planner with a language model.
        :param llm: The language model to be used for planning
        """
        self.llm = llm
        logging.basicConfig(level=logging.INFO)

    def generate_plan(self, task):
        """
        Use the language model to create a plan for the given task.
        :param task: The task to be planned
        :return: A plan generated by the LLM
        """
        try:
            plan = self.llm.generate_plan(task)
            logging.info(f"Plan generated for task '{task}': {plan}")
            return plan
        except Exception as e:
            logging.error(f"Error generating plan for task '{task}': {e}")
            return []

# Example usage
class MockLLM:
    def generate_plan(self, task):
        # Mocked plan generation
        return [{'tool': 'search_tool', 'action': 'search', 'params': {'query': task}}]

llm = MockLLM()
planner = LLMPlanner(llm)

tasks = ["find information on AI", "summarize recent news"]
for task in tasks:
    plan = planner.generate_plan(task)
    print(f"Plan for '{task}': {plan}")